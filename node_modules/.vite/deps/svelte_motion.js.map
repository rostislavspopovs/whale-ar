{
  "version": 3,
  "sources": ["../../svelte/src/motion/utils.js", "../../svelte/src/motion/spring.js", "../../svelte/src/motion/tweened.js"],
  "sourcesContent": ["/**\r\n * @param {any} obj\r\n * @returns {obj is Date}\r\n */\r\nexport function is_date(obj) {\r\n\treturn Object.prototype.toString.call(obj) === '[object Date]';\r\n}\r\n", "/** @import { Task } from '#client' */\r\n/** @import { SpringOpts, SpringUpdateOpts, TickContext } from './private.js' */\r\n/** @import { Spring } from './public.js' */\r\nimport { writable } from '../store/shared/index.js';\r\nimport { loop } from '../internal/client/loop.js';\r\nimport { raf } from '../internal/client/timing.js';\r\nimport { is_date } from './utils.js';\r\n\r\n/**\r\n * @template T\r\n * @param {TickContext<T>} ctx\r\n * @param {T} last_value\r\n * @param {T} current_value\r\n * @param {T} target_value\r\n * @returns {T}\r\n */\r\nfunction tick_spring(ctx, last_value, current_value, target_value) {\r\n\tif (typeof current_value === 'number' || is_date(current_value)) {\r\n\t\t// @ts-ignore\r\n\t\tconst delta = target_value - current_value;\r\n\t\t// @ts-ignore\r\n\t\tconst velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0\r\n\t\tconst spring = ctx.opts.stiffness * delta;\r\n\t\tconst damper = ctx.opts.damping * velocity;\r\n\t\tconst acceleration = (spring - damper) * ctx.inv_mass;\r\n\t\tconst d = (velocity + acceleration) * ctx.dt;\r\n\t\tif (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {\r\n\t\t\treturn target_value; // settled\r\n\t\t} else {\r\n\t\t\tctx.settled = false; // signal loop to keep ticking\r\n\t\t\t// @ts-ignore\r\n\t\t\treturn is_date(current_value) ? new Date(current_value.getTime() + d) : current_value + d;\r\n\t\t}\r\n\t} else if (Array.isArray(current_value)) {\r\n\t\t// @ts-ignore\r\n\t\treturn current_value.map((_, i) =>\r\n\t\t\t// @ts-ignore\r\n\t\t\ttick_spring(ctx, last_value[i], current_value[i], target_value[i])\r\n\t\t);\r\n\t} else if (typeof current_value === 'object') {\r\n\t\tconst next_value = {};\r\n\t\tfor (const k in current_value) {\r\n\t\t\t// @ts-ignore\r\n\t\t\tnext_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);\r\n\t\t}\r\n\t\t// @ts-ignore\r\n\t\treturn next_value;\r\n\t} else {\r\n\t\tthrow new Error(`Cannot spring ${typeof current_value} values`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The spring function in Svelte creates a store whose value is animated, with a motion that simulates the behavior of a spring. This means when the value changes, instead of transitioning at a steady rate, it \"bounces\" like a spring would, depending on the physics parameters provided. This adds a level of realism to the transitions and can enhance the user experience.\r\n *\r\n * @template [T=any]\r\n * @param {T} [value]\r\n * @param {SpringOpts} [opts]\r\n * @returns {Spring<T>}\r\n */\r\nexport function spring(value, opts = {}) {\r\n\tconst store = writable(value);\r\n\tconst { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;\r\n\t/** @type {number} */\r\n\tlet last_time;\r\n\t/** @type {Task | null} */\r\n\tlet task;\r\n\t/** @type {object} */\r\n\tlet current_token;\r\n\r\n\tlet last_value = /** @type {T} */ (value);\r\n\tlet target_value = /** @type {T | undefined} */ (value);\r\n\r\n\tlet inv_mass = 1;\r\n\tlet inv_mass_recovery_rate = 0;\r\n\tlet cancel_task = false;\r\n\t/**\r\n\t * @param {T} new_value\r\n\t * @param {SpringUpdateOpts} opts\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tfunction set(new_value, opts = {}) {\r\n\t\ttarget_value = new_value;\r\n\t\tconst token = (current_token = {});\r\n\t\tif (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {\r\n\t\t\tcancel_task = true; // cancel any running animation\r\n\t\t\tlast_time = raf.now();\r\n\t\t\tlast_value = new_value;\r\n\t\t\tstore.set((value = target_value));\r\n\t\t\treturn Promise.resolve();\r\n\t\t} else if (opts.soft) {\r\n\t\t\tconst rate = opts.soft === true ? 0.5 : +opts.soft;\r\n\t\t\tinv_mass_recovery_rate = 1 / (rate * 60);\r\n\t\t\tinv_mass = 0; // infinite mass, unaffected by spring forces\r\n\t\t}\r\n\t\tif (!task) {\r\n\t\t\tlast_time = raf.now();\r\n\t\t\tcancel_task = false;\r\n\t\t\ttask = loop((now) => {\r\n\t\t\t\tif (cancel_task) {\r\n\t\t\t\t\tcancel_task = false;\r\n\t\t\t\t\ttask = null;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tinv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);\r\n\t\t\t\t/** @type {TickContext<T>} */\r\n\t\t\t\tconst ctx = {\r\n\t\t\t\t\tinv_mass,\r\n\t\t\t\t\topts: spring,\r\n\t\t\t\t\tsettled: true,\r\n\t\t\t\t\tdt: ((now - last_time) * 60) / 1000\r\n\t\t\t\t};\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst next_value = tick_spring(ctx, last_value, value, target_value);\r\n\t\t\t\tlast_time = now;\r\n\t\t\t\tlast_value = /** @type {T} */ (value);\r\n\t\t\t\tstore.set((value = /** @type {T} */ (next_value)));\r\n\t\t\t\tif (ctx.settled) {\r\n\t\t\t\t\ttask = null;\r\n\t\t\t\t}\r\n\t\t\t\treturn !ctx.settled;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn new Promise((fulfil) => {\r\n\t\t\t/** @type {Task} */ (task).promise.then(() => {\r\n\t\t\t\tif (token === current_token) fulfil();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t/** @type {Spring<T>} */\r\n\tconst spring = {\r\n\t\tset,\r\n\t\tupdate: (fn, opts) => set(fn(/** @type {T} */ (target_value), /** @type {T} */ (value)), opts),\r\n\t\tsubscribe: store.subscribe,\r\n\t\tstiffness,\r\n\t\tdamping,\r\n\t\tprecision\r\n\t};\r\n\treturn spring;\r\n}\r\n", "/** @import { Task } from '../internal/client/types' */\r\n/** @import { Tweened } from './public' */\r\n/** @import { TweenedOptions } from './private' */\r\nimport { writable } from '../store/shared/index.js';\r\nimport { raf } from '../internal/client/timing.js';\r\nimport { loop } from '../internal/client/loop.js';\r\nimport { linear } from '../easing/index.js';\r\nimport { is_date } from './utils.js';\r\n\r\n/**\r\n * @template T\r\n * @param {T} a\r\n * @param {T} b\r\n * @returns {(t: number) => T}\r\n */\r\nfunction get_interpolator(a, b) {\r\n\tif (a === b || a !== a) return () => a;\r\n\r\n\tconst type = typeof a;\r\n\tif (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {\r\n\t\tthrow new Error('Cannot interpolate values of different type');\r\n\t}\r\n\r\n\tif (Array.isArray(a)) {\r\n\t\tconst arr = /** @type {Array<any>} */ (b).map((bi, i) => {\r\n\t\t\treturn get_interpolator(/** @type {Array<any>} */ (a)[i], bi);\r\n\t\t});\r\n\r\n\t\t// @ts-ignore\r\n\t\treturn (t) => arr.map((fn) => fn(t));\r\n\t}\r\n\r\n\tif (type === 'object') {\r\n\t\tif (!a || !b) {\r\n\t\t\tthrow new Error('Object cannot be null');\r\n\t\t}\r\n\r\n\t\tif (is_date(a) && is_date(b)) {\r\n\t\t\tconst an = a.getTime();\r\n\t\t\tconst bn = b.getTime();\r\n\t\t\tconst delta = bn - an;\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\treturn (t) => new Date(an + t * delta);\r\n\t\t}\r\n\r\n\t\tconst keys = Object.keys(b);\r\n\r\n\t\t/** @type {Record<string, (t: number) => T>} */\r\n\t\tconst interpolators = {};\r\n\t\tkeys.forEach((key) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tinterpolators[key] = get_interpolator(a[key], b[key]);\r\n\t\t});\r\n\r\n\t\t// @ts-ignore\r\n\t\treturn (t) => {\r\n\t\t\t/** @type {Record<string, any>} */\r\n\t\t\tconst result = {};\r\n\t\t\tkeys.forEach((key) => {\r\n\t\t\t\tresult[key] = interpolators[key](t);\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t};\r\n\t}\r\n\r\n\tif (type === 'number') {\r\n\t\tconst delta = /** @type {number} */ (b) - /** @type {number} */ (a);\r\n\t\t// @ts-ignore\r\n\t\treturn (t) => a + t * delta;\r\n\t}\r\n\r\n\tthrow new Error(`Cannot interpolate ${type} values`);\r\n}\r\n\r\n/**\r\n * A tweened store in Svelte is a special type of store that provides smooth transitions between state values over time.\r\n *\r\n * @template T\r\n * @param {T} [value]\r\n * @param {TweenedOptions<T>} [defaults]\r\n * @returns {Tweened<T>}\r\n */\r\nexport function tweened(value, defaults = {}) {\r\n\tconst store = writable(value);\r\n\t/** @type {Task} */\r\n\tlet task;\r\n\tlet target_value = value;\r\n\t/**\r\n\t * @param {T} new_value\r\n\t * @param {TweenedOptions<T>} [opts]\r\n\t */\r\n\tfunction set(new_value, opts) {\r\n\t\ttarget_value = new_value;\r\n\r\n\t\tif (value == null) {\r\n\t\t\tstore.set((value = new_value));\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\t/** @type {Task | null} */\r\n\t\tlet previous_task = task;\r\n\r\n\t\tlet started = false;\r\n\t\tlet {\r\n\t\t\tdelay = 0,\r\n\t\t\tduration = 400,\r\n\t\t\teasing = linear,\r\n\t\t\tinterpolate = get_interpolator\r\n\t\t} = { ...defaults, ...opts };\r\n\r\n\t\tif (duration === 0) {\r\n\t\t\tif (previous_task) {\r\n\t\t\t\tprevious_task.abort();\r\n\t\t\t\tprevious_task = null;\r\n\t\t\t}\r\n\t\t\tstore.set((value = target_value));\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\tconst start = raf.now() + delay;\r\n\r\n\t\t/** @type {(t: number) => T} */\r\n\t\tlet fn;\r\n\t\ttask = loop((now) => {\r\n\t\t\tif (now < start) return true;\r\n\t\t\tif (!started) {\r\n\t\t\t\tfn = interpolate(/** @type {any} */ (value), new_value);\r\n\t\t\t\tif (typeof duration === 'function')\r\n\t\t\t\t\tduration = duration(/** @type {any} */ (value), new_value);\r\n\t\t\t\tstarted = true;\r\n\t\t\t}\r\n\t\t\tif (previous_task) {\r\n\t\t\t\tprevious_task.abort();\r\n\t\t\t\tprevious_task = null;\r\n\t\t\t}\r\n\t\t\tconst elapsed = now - start;\r\n\t\t\tif (elapsed > /** @type {number} */ (duration)) {\r\n\t\t\t\tstore.set((value = new_value));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// @ts-ignore\r\n\t\t\tstore.set((value = fn(easing(elapsed / duration))));\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\treturn task.promise;\r\n\t}\r\n\treturn {\r\n\t\tset,\r\n\t\tupdate: (fn, opts) =>\r\n\t\t\tset(fn(/** @type {any} */ (target_value), /** @type {any} */ (value)), opts),\r\n\t\tsubscribe: store.subscribe\r\n\t};\r\n}\r\n"],
  "mappings": "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",
  "names": ["spring", "opts"]
}
